/*
 * Core APIs. "App" is the Express server instance. The API endpoints are defined here.
 */

const AccountGroup = require('./account-group.js');
const ValidatorGroup = require('./validator-group.js');
const MessageNodeGroup = require('./messagenode-group.js');

module.exports = class CoreAPIs {
    constructor(App) {
        this.App = App;     // Express App instance.
        this.apiPrefix = '/blockfin/experimental';
        this._DEFAULT_ACCOUNTS = 100;
        this._DEFAULT_TRANSACTIONS = 100 * this._DEFAULT_ACCOUNTS;
        this._DEFAULT_VALIDATORS = 61;
        this._DEFAULT_PAUSE_BETWEEN_TRANSACTIONS = 10;  // 10 milliseconds.
        this.setupCoreAPIs(); 
    }
    
    setupCoreAPIs() {
        let that = this;
        
        /*
         * Start BlockFin simulator. The simulator takes the following paramaters.
         * @param accounts - total number of accounts/wallets to use in the simulator. Defaults to 100.
         * @param validators - total number of validators to use in the simulator. Defaults to 61, which provides up to 20 Byzantine actors.
         *                     Use N = 3f + 1 where f is the number of Byzantine nodes as guideline.
         * @param transactions - total number of transactions to create. Defaults to 100 x totalAccounts. All accounts not necessarily create the same
         *                            number of transactions, but we randomly pick an account to create transactions. So, there may be idle accounts.
         * @param pause - Pause between generating transactions in milliseconds. Defaults to 10.
         *
         * Example: https://localhost:8008/blockfin/experimental/run-simulator?accounts=10&transactions=50&validators=13&pause=100
         */
        
        this.App.get(this.apiPrefix+'/run-simulator', function(req, res) {
            if (that.accountGroup) {
                res.status(200).json({status: 'success', message: 'BlockFin simulator is already running. Please stop it to relaunch.'});
            }
            if (!req.query.accounts) {
                req.query.accounts = that._DEFAULT_ACCOUNTS;
            }
            if (!req.query.validators) {
                req.query.validators = that._DEFAULT_VALIDATORS;
            }
            if (!req.query.transactions) {
                req.query.transactions = that._DEFAULT_TRANSACTIONS;
            }
            if (!req.query.pause) {
                req.query.pause = that._DEFAULT_PAUSE_BETWEEN_TRANSACTIONS;
            }
            
            // Create an account group to manage accounts and validator group to coordinate validators.
            that.accountGroup = new AccountGroup(req.query.accounts, req.query.transactions, req.query.pause);   
            that.validatorGroup = new ValidatorGroup(that.validators);
            that.messageNodeGroup = new MessageNodeGroup(Math.ceil(req.query.validators/4));
            
            // Start generating transactions. This will take a while, but tell the caller that the simulator was launched.
            that.accountGroup.generateTransactions(that.validatorGroup);
            res.status(200).json({status: 'success', message: 'BlockFin simulator is launched with the following parameters',
                                 params: req.query});
        });  
        
        /*
         * Stop the simulator. Some async processes may not fully stop. This API is demo purposes only.
         */
        
        this.App.get(this.apiPrefix+'/stop-simulator', function(req, res) {
            if (that.accountGroup) {
                delete that.accountGroup;
                delete that.validatorGroup;
                delete that.messageNodeGroup;
                that.accountGroup = null;
                that.validatorGroup = null;
                that.messageNodeGroup = null;
                
                res.status(200).json({status: 'success', message: 'BlockFin simulator stopped.'});
            } 
            
        });
        
        /*
         * List all the account ids. This can be used to get a list of account ids so transactions for specific accounts can be queried.
         */
        
        this.App.get(this.apiPrefix+'/accounts', function(req, res) {
            if (!that.accountGroup) {
                res.status(500).json({status: 'error', message: 'BlockFin simulator is not launched.'});
            } else {
                res.status(200).json({status: 'success', accounts: that.accountGroup.accountList()});
            }
            
        });
        
        /*
         * Show all the transactions generated by respective accounts. Since transaction generation is asynchronous process,
         * it may take a while before all transactions are listed. Some accounts may not generate any transactions at all because it is all random.
         * @param account - Account Id of specific account. Optional. If not specified, the transactions for all accounts are returned.
         */
        
        this.App.get(this.apiPrefix+'/transactions', function(req, res) {
            if (!that.accountGroup) {
                res.status(500).json({status: 'error', message: 'BlockFin simulator is not launched.'});
            } else {
                res.status(200).json({status: 'success', transactions: that.accountGroup.transactionList(req.query.account)});
            }
            
        });
        
        /*
         * Show all the transaction batches generated by all validator nodes. The validator nodes create batches of transactions they receive from
         * accounts and send these transaction batches to connected (a subset of) message nodes.
         * @param validator - The validator Id to filter by.
         */
        
        this.App.get(this.apiPrefix+'/transaction-batches', function(req, res) {
            if (!that.validatorGroup) {
                res.status(500).json({status: 'error', message: 'BlockFin simulator is not launched.'});
            } else {
                res.status(200).json({status: 'success', transactionBatches: that.validatorGroup.transactionBatches(req.query.validator)});
            }
            
        });
        
        /*
         * Show the transaction batches ("a batch of transaction batches", to be accurate) received at message nodes. These batches
         * will eventually be included in the blocks.
         */
        
        this.App.get(this.apiPrefix+'/mempool', function(req, res) {
            if (!that.messageNodeGroup) {
                res.status(500).json({status: 'error', message: 'BlockFin simulator is not launched.'});
            } else {
                res.status(200).json({status: 'success', mempool: that.messageNodeGroup.transactionBatches(req.query.messagenode)});
            }
            
        });
        
    }
    
}
