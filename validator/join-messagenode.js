/*
 * THIS IS NOT REQUIRED, IF MESSAGENODES JOIN VALIDATORS FIRST. 
 * Joins Messagenode Pub servers. Each validator will connect to all the available Messagenodes.
 * The input file, messagenode-invites.json is generated by Messagenodes and contains all the invitations validators need to connect to them.
 */

const ssbKeys = require('ssb-keys'),
      fs = require('fs'),
      jsonFormat = require('json-format'),
      ssbClient = require('ssb-client'),
      ssbFeed = require('ssb-feed'),
      pull = require('pull-stream');

const ssbConfigDir = './.ssb';

let configData = JSON.parse(fs.readFileSync('./validator-config.json')),  // Array of configurations, once for each validator.
    invitations = JSON.parse(fs.readFileSync('./messagenode-invites.json'));   // Invitations are generated by the Messagenodes.

const jsonFormatter = {
        type: 'space',
        size: 4
      };

// For each messagenode, load the "secret" key from respective messagenode folder and then create a client to connect to the 
// respective messagenode node.
configData.forEach((validatorConfig, index) => {
    const validatorDir = ssbConfigDir + '/v' + (index+1),
          validatorKey = 'secret';

    // Create a feed for messagenode with other roles it can take as messages. The other nodes, when connected to this messagenode,
    // will follow this feed to know its roles.

    const keys = ssbKeys.loadOrCreateSync(validatorDir + '/' + validatorKey)
    console.log(validatorDir);
    console.log(keys);
    
    ssbClient(keys, {
        host: 'localhost', // Connect to local pub server
        port: validatorConfig[validatorKey].port,        // Validator port
        key: keys.id,      // optional, defaults to keys.id
        path: validatorDir,      // All config data.   
        caps: {
            // Standard secret-handshake
            shs: '1KHLiKZvAvjbY1ziZEHMXawbCEIM6qwjCDm3VYRan/s='
        }
      },
      function (err, sbot, config) {
            if (err) { console.log(err); return; }
            // Each invitation is meant for a different validator node. Connect to all of them.
            invitations.forEach((invite) => {
                sbot.invite.accept(invite.invite, (err) => {
                    if (err) {
                        console.log('Using invite failed for ' + validatorDir)
                        console.log(err)
                    } else {
                        console.log('Using invite succeeded for ' + validatorDir);
                    }
                })
            })
        })

})
